// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playground_service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Playground.Common.ServiceDefinition {
  public static class PlaygroundService
  {
    static readonly string __ServiceName = "PlaygroundService";

    static readonly Marshaller<global::Playground.Common.ServiceDefinition.PersonId> __Marshaller_PersonId = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Playground.Common.ServiceDefinition.PersonId.Parser.ParseFrom);
    static readonly Marshaller<global::Playground.Common.ServiceDefinition.Person> __Marshaller_Person = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Playground.Common.ServiceDefinition.Person.Parser.ParseFrom);
    static readonly Marshaller<global::Playground.Common.ServiceDefinition.PersonListRequest> __Marshaller_PersonListRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Playground.Common.ServiceDefinition.PersonListRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Playground.Common.ServiceDefinition.PersonListResponse> __Marshaller_PersonListResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Playground.Common.ServiceDefinition.PersonListResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Playground.Common.ServiceDefinition.ListenForNewPeopleRequest> __Marshaller_ListenForNewPeopleRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Playground.Common.ServiceDefinition.ListenForNewPeopleRequest.Parser.ParseFrom);

    static readonly Method<global::Playground.Common.ServiceDefinition.PersonId, global::Playground.Common.ServiceDefinition.Person> __Method_GetPersonById = new Method<global::Playground.Common.ServiceDefinition.PersonId, global::Playground.Common.ServiceDefinition.Person>(
        MethodType.Unary,
        __ServiceName,
        "GetPersonById",
        __Marshaller_PersonId,
        __Marshaller_Person);

    static readonly Method<global::Playground.Common.ServiceDefinition.PersonListRequest, global::Playground.Common.ServiceDefinition.Person> __Method_GetPersonList = new Method<global::Playground.Common.ServiceDefinition.PersonListRequest, global::Playground.Common.ServiceDefinition.Person>(
        MethodType.ServerStreaming,
        __ServiceName,
        "GetPersonList",
        __Marshaller_PersonListRequest,
        __Marshaller_Person);

    static readonly Method<global::Playground.Common.ServiceDefinition.Person, global::Playground.Common.ServiceDefinition.PersonListResponse> __Method_CreatePeople = new Method<global::Playground.Common.ServiceDefinition.Person, global::Playground.Common.ServiceDefinition.PersonListResponse>(
        MethodType.ClientStreaming,
        __ServiceName,
        "CreatePeople",
        __Marshaller_Person,
        __Marshaller_PersonListResponse);

    static readonly Method<global::Playground.Common.ServiceDefinition.ListenForNewPeopleRequest, global::Playground.Common.ServiceDefinition.Person> __Method_ListenForNewPeople = new Method<global::Playground.Common.ServiceDefinition.ListenForNewPeopleRequest, global::Playground.Common.ServiceDefinition.Person>(
        MethodType.ServerStreaming,
        __ServiceName,
        "ListenForNewPeople",
        __Marshaller_ListenForNewPeopleRequest,
        __Marshaller_Person);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Playground.Common.ServiceDefinition.Proto.PlaygroundService.Descriptor.Services[0]; }
    }

    // client interface
    public interface IPlaygroundServiceClient
    {
      global::Playground.Common.ServiceDefinition.Person GetPersonById(global::Playground.Common.ServiceDefinition.PersonId request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Playground.Common.ServiceDefinition.Person GetPersonById(global::Playground.Common.ServiceDefinition.PersonId request, CallOptions options);
      AsyncUnaryCall<global::Playground.Common.ServiceDefinition.Person> GetPersonByIdAsync(global::Playground.Common.ServiceDefinition.PersonId request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Playground.Common.ServiceDefinition.Person> GetPersonByIdAsync(global::Playground.Common.ServiceDefinition.PersonId request, CallOptions options);
      AsyncServerStreamingCall<global::Playground.Common.ServiceDefinition.Person> GetPersonList(global::Playground.Common.ServiceDefinition.PersonListRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncServerStreamingCall<global::Playground.Common.ServiceDefinition.Person> GetPersonList(global::Playground.Common.ServiceDefinition.PersonListRequest request, CallOptions options);
      AsyncClientStreamingCall<global::Playground.Common.ServiceDefinition.Person, global::Playground.Common.ServiceDefinition.PersonListResponse> CreatePeople(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncClientStreamingCall<global::Playground.Common.ServiceDefinition.Person, global::Playground.Common.ServiceDefinition.PersonListResponse> CreatePeople(CallOptions options);
      AsyncServerStreamingCall<global::Playground.Common.ServiceDefinition.Person> ListenForNewPeople(global::Playground.Common.ServiceDefinition.ListenForNewPeopleRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncServerStreamingCall<global::Playground.Common.ServiceDefinition.Person> ListenForNewPeople(global::Playground.Common.ServiceDefinition.ListenForNewPeopleRequest request, CallOptions options);
    }

    // server-side interface
    public interface IPlaygroundService
    {
      Task<global::Playground.Common.ServiceDefinition.Person> GetPersonById(global::Playground.Common.ServiceDefinition.PersonId request, ServerCallContext context);
      Task GetPersonList(global::Playground.Common.ServiceDefinition.PersonListRequest request, IServerStreamWriter<global::Playground.Common.ServiceDefinition.Person> responseStream, ServerCallContext context);
      Task<global::Playground.Common.ServiceDefinition.PersonListResponse> CreatePeople(IAsyncStreamReader<global::Playground.Common.ServiceDefinition.Person> requestStream, ServerCallContext context);
      Task ListenForNewPeople(global::Playground.Common.ServiceDefinition.ListenForNewPeopleRequest request, IServerStreamWriter<global::Playground.Common.ServiceDefinition.Person> responseStream, ServerCallContext context);
    }

    // client stub
    public class PlaygroundServiceClient : ClientBase, IPlaygroundServiceClient
    {
      public PlaygroundServiceClient(Channel channel) : base(channel)
      {
      }
      public global::Playground.Common.ServiceDefinition.Person GetPersonById(global::Playground.Common.ServiceDefinition.PersonId request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetPersonById, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Playground.Common.ServiceDefinition.Person GetPersonById(global::Playground.Common.ServiceDefinition.PersonId request, CallOptions options)
      {
        var call = CreateCall(__Method_GetPersonById, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Playground.Common.ServiceDefinition.Person> GetPersonByIdAsync(global::Playground.Common.ServiceDefinition.PersonId request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetPersonById, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Playground.Common.ServiceDefinition.Person> GetPersonByIdAsync(global::Playground.Common.ServiceDefinition.PersonId request, CallOptions options)
      {
        var call = CreateCall(__Method_GetPersonById, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncServerStreamingCall<global::Playground.Common.ServiceDefinition.Person> GetPersonList(global::Playground.Common.ServiceDefinition.PersonListRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetPersonList, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::Playground.Common.ServiceDefinition.Person> GetPersonList(global::Playground.Common.ServiceDefinition.PersonListRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetPersonList, options);
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncClientStreamingCall<global::Playground.Common.ServiceDefinition.Person, global::Playground.Common.ServiceDefinition.PersonListResponse> CreatePeople(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_CreatePeople, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncClientStreamingCall(call);
      }
      public AsyncClientStreamingCall<global::Playground.Common.ServiceDefinition.Person, global::Playground.Common.ServiceDefinition.PersonListResponse> CreatePeople(CallOptions options)
      {
        var call = CreateCall(__Method_CreatePeople, options);
        return Calls.AsyncClientStreamingCall(call);
      }
      public AsyncServerStreamingCall<global::Playground.Common.ServiceDefinition.Person> ListenForNewPeople(global::Playground.Common.ServiceDefinition.ListenForNewPeopleRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_ListenForNewPeople, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::Playground.Common.ServiceDefinition.Person> ListenForNewPeople(global::Playground.Common.ServiceDefinition.ListenForNewPeopleRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_ListenForNewPeople, options);
        return Calls.AsyncServerStreamingCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IPlaygroundService serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_GetPersonById, serviceImpl.GetPersonById)
          .AddMethod(__Method_GetPersonList, serviceImpl.GetPersonList)
          .AddMethod(__Method_CreatePeople, serviceImpl.CreatePeople)
          .AddMethod(__Method_ListenForNewPeople, serviceImpl.ListenForNewPeople).Build();
    }

    // creates a new client
    public static PlaygroundServiceClient NewClient(Channel channel)
    {
      return new PlaygroundServiceClient(channel);
    }

  }
}
#endregion
