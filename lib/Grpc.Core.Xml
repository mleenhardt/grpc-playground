<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Grpc.Core</name>
    </assembly>
    <members>
        <member name="T:Grpc.Core.AsyncDuplexStreamingCall`2">
            <summary>
            Return type for bidirectional streaming calls.
            </summary>
            <typeparam name="TRequest">Request message type for this call.</typeparam>
            <typeparam name="TResponse">Response message type for this call.</typeparam>
        </member>
        <member name="M:Grpc.Core.AsyncDuplexStreamingCall`2.GetStatus">
            <summary>
            Gets the call status if the call has already finished.
            Throws InvalidOperationException otherwise.
            </summary>
        </member>
        <member name="M:Grpc.Core.AsyncDuplexStreamingCall`2.GetTrailers">
            <summary>
            Gets the call trailing metadata if the call has already finished.
            Throws InvalidOperationException otherwise.
            </summary>
        </member>
        <member name="M:Grpc.Core.AsyncDuplexStreamingCall`2.Dispose">
            <summary>
            Provides means to cleanup after the call.
            If the call has already finished normally (request stream has been completed and response stream has been fully read), doesn't do anything.
            Otherwise, requests cancellation of the call which should terminate all pending async operations associated with the call.
            As a result, all resources being used by the call should be released eventually.
            </summary>
        </member>
        <member name="P:Grpc.Core.AsyncDuplexStreamingCall`2.ResponseStream">
            <summary>
            Async stream to read streaming responses.
            </summary>
        </member>
        <member name="P:Grpc.Core.AsyncDuplexStreamingCall`2.RequestStream">
            <summary>
            Async stream to send streaming requests.
            </summary>
        </member>
        <member name="P:Grpc.Core.AsyncDuplexStreamingCall`2.ResponseHeadersAsync">
            <summary>
            Asynchronous access to response headers.
            </summary>
        </member>
        <member name="T:Grpc.Core.AsyncServerStreamingCall`1">
            <summary>
            Return type for server streaming calls.
            </summary>
            <typeparam name="TResponse">Response message type for this call.</typeparam>
        </member>
        <member name="M:Grpc.Core.AsyncServerStreamingCall`1.GetStatus">
            <summary>
            Gets the call status if the call has already finished.
            Throws InvalidOperationException otherwise.
            </summary>
        </member>
        <member name="M:Grpc.Core.AsyncServerStreamingCall`1.GetTrailers">
            <summary>
            Gets the call trailing metadata if the call has already finished.
            Throws InvalidOperationException otherwise.
            </summary>
        </member>
        <member name="M:Grpc.Core.AsyncServerStreamingCall`1.Dispose">
            <summary>
            Provides means to cleanup after the call.
            If the call has already finished normally (response stream has been fully read), doesn't do anything.
            Otherwise, requests cancellation of the call which should terminate all pending async operations associated with the call.
            As a result, all resources being used by the call should be released eventually.
            </summary>
        </member>
        <member name="P:Grpc.Core.AsyncServerStreamingCall`1.ResponseStream">
            <summary>
            Async stream to read streaming responses.
            </summary>
        </member>
        <member name="P:Grpc.Core.AsyncServerStreamingCall`1.ResponseHeadersAsync">
            <summary>
            Asynchronous access to response headers.
            </summary>
        </member>
        <member name="T:Grpc.Core.AsyncAuthInterceptor">
            <summary>
            Asynchronous authentication interceptor for <see cref="T:Grpc.Core.CallCredentials"/>.
            </summary>
            <param name="context">The interceptor context.</param>
            <param name="metadata">Metadata to populate with entries that will be added to outgoing call's headers.</param>
            <returns></returns>
        </member>
        <member name="T:Grpc.Core.AuthInterceptorContext">
            <summary>
            Context for an RPC being intercepted by <see cref="T:Grpc.Core.AsyncAuthInterceptor"/>.
            </summary>
        </member>
        <member name="M:Grpc.Core.AuthInterceptorContext.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <c>AuthInterceptorContext</c>.
            </summary>
        </member>
        <member name="P:Grpc.Core.AuthInterceptorContext.ServiceUrl">
            <summary>
            The fully qualified service URL for the RPC being called.
            </summary>
        </member>
        <member name="P:Grpc.Core.AuthInterceptorContext.MethodName">
            <summary>
            The method name of the RPC being called.
            </summary>
        </member>
        <member name="T:Grpc.Core.CallCredentials">
            <summary>
            Client-side call credentials. Provide authorization with per-call granularity.
            </summary>
        </member>
        <member name="M:Grpc.Core.CallCredentials.Compose(Grpc.Core.CallCredentials[])">
            <summary>
            Composes multiple multiple <c>CallCredentials</c> objects into
            a single <c>CallCredentials</c> object.
            </summary>
            <param name="credentials">credentials to compose</param>
            <returns>The new <c>CompositeCallCredentials</c></returns>
        </member>
        <member name="M:Grpc.Core.CallCredentials.FromInterceptor(Grpc.Core.AsyncAuthInterceptor)">
            <summary>
            Creates a new instance of <c>CallCredentials</c> class from an
            interceptor that can attach metadata to outgoing calls.
            </summary>
            <param name="interceptor">authentication interceptor</param>
        </member>
        <member name="M:Grpc.Core.CallCredentials.ToNativeCredentials">
            <summary>
            Creates native object for the credentials.
            </summary>
            <returns>The native credentials.</returns>
        </member>
        <member name="T:Grpc.Core.MetadataCredentials">
            <summary>
            Client-side credentials that delegate metadata based auth to an interceptor.
            The interceptor is automatically invoked for each remote call that uses <c>MetadataCredentials.</c>
            </summary>
        </member>
        <member name="M:Grpc.Core.MetadataCredentials.#ctor(Grpc.Core.AsyncAuthInterceptor)">
            <summary>
            Initializes a new instance of <c>MetadataCredentials</c> class.
            </summary>
            <param name="interceptor">authentication interceptor</param>
        </member>
        <member name="T:Grpc.Core.CompositeCallCredentials">
            <summary>
            Credentials that allow composing multiple credentials objects into one <see cref="T:Grpc.Core.CallCredentials"/> object.
            </summary>
        </member>
        <member name="M:Grpc.Core.CompositeCallCredentials.#ctor(Grpc.Core.CallCredentials[])">
            <summary>
            Initializes a new instance of <c>CompositeCallCredentials</c> class.
            The resulting credentials object will be composite of all the credentials specified as parameters.
            </summary>
            <param name="credentials">credentials to compose</param>
        </member>
        <member name="T:Grpc.Core.IClientStreamWriter`1">
            <summary>
            Client-side writable stream of messages with Close capability.
            </summary>
            <typeparam name="T">The message type.</typeparam>
        </member>
        <member name="T:Grpc.Core.IAsyncStreamWriter`1">
            <summary>
            A writable stream of messages.
            </summary>
            <typeparam name="T">The message type.</typeparam>
        </member>
        <member name="M:Grpc.Core.IAsyncStreamWriter`1.WriteAsync(`0)">
            <summary>
            Writes a single asynchronously. Only one write can be pending at a time.
            </summary>
            <param name="message">the message to be written. Cannot be null.</param>
        </member>
        <member name="P:Grpc.Core.IAsyncStreamWriter`1.WriteOptions">
            <summary>
            Write options that will be used for the next write.
            If null, default options will be used.
            Once set, this property maintains its value across subsequent
            writes.
            </summary>
        </member>
        <member name="M:Grpc.Core.IClientStreamWriter`1.CompleteAsync">
            <summary>
            Completes/closes the stream. Can only be called once there is no pending write. No writes should follow calling this.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.INativeCall">
            <summary>
            Abstraction of a native call object.
            </summary>
        </member>
        <member name="T:Grpc.Core.IServerStreamWriter`1">
            <summary>
            A writable stream of messages that is used in server-side handlers.
            </summary>
        </member>
        <member name="T:Grpc.Core.IAsyncStreamReader`1">
            <summary>
            A stream of messages to be read.
            </summary>
            <typeparam name="T">The message type.</typeparam>
        </member>
        <member name="T:Grpc.Core.ServerPort">
            <summary>
            A port exposed by a server.
            </summary>
        </member>
        <member name="F:Grpc.Core.ServerPort.PickUnused">
            <summary>
            Pass this value as port to have the server choose an unused listening port for you.
            Ports added to a server will contain the bound port in their <see cref="P:Grpc.Core.ServerPort.BoundPort"/> property.
            </summary>
        </member>
        <member name="M:Grpc.Core.ServerPort.#ctor(System.String,System.Int32,Grpc.Core.ServerCredentials)">
            <summary>
            Creates a new port on which server should listen.
            </summary>
            <returns>The port on which server will be listening.</returns>
            <param name="host">the host</param>
            <param name="port">the port. If zero, an unused port is chosen automatically.</param>
            <param name="credentials">credentials to use to secure this port.</param>
        </member>
        <member name="M:Grpc.Core.ServerPort.#ctor(Grpc.Core.ServerPort,System.Int32)">
            <summary>
            Creates a port from an existing <c>ServerPort</c> instance and boundPort value.
            </summary>
        </member>
        <member name="P:Grpc.Core.ServerPort.Host">
            <value>The host.</value>
        </member>
        <member name="P:Grpc.Core.ServerPort.Port">
            <value>The port.</value>
        </member>
        <member name="P:Grpc.Core.ServerPort.Credentials">
            <value>The server credentials.</value>
        </member>
        <member name="P:Grpc.Core.ServerPort.BoundPort">
            <value>
            The port actually bound by the server. This is useful if you let server
            pick port automatically. <see cref="F:Grpc.Core.ServerPort.PickUnused"/>
            </value>
        </member>
        <member name="T:Grpc.Core.RpcException">
            <summary>
            Thrown when remote procedure call fails. Every <c>RpcException</c> is associated with a resulting <see cref="P:Grpc.Core.RpcException.Status"/> of the call.
            </summary>
        </member>
        <member name="M:Grpc.Core.RpcException.#ctor(Grpc.Core.Status)">
            <summary>
            Creates a new <c>RpcException</c> associated with given status.
            </summary>
            <param name="status">Resulting status of a call.</param>
        </member>
        <member name="M:Grpc.Core.RpcException.#ctor(Grpc.Core.Status,System.String)">
            <summary>
            Creates a new <c>RpcException</c> associated with given status and message.
            </summary>
            <param name="status">Resulting status of a call.</param>
            <param name="message">The exception message.</param> 
        </member>
        <member name="P:Grpc.Core.RpcException.Status">
            <summary>
            Resulting status of the call.
            </summary>
        </member>
        <member name="T:Grpc.Core.Calls">
            <summary>
            Helper methods for generated clients to make RPC calls.
            Most users will use this class only indirectly and will be 
            making calls using client object generated from protocol
            buffer definition files.
            </summary>
        </member>
        <member name="M:Grpc.Core.Calls.BlockingUnaryCall``2(Grpc.Core.CallInvocationDetails{``0,``1},``0)">
            <summary>
            Invokes a simple remote call in a blocking fashion.
            </summary>
            <returns>The response.</returns>
            <param name="call">The call defintion.</param>
            <param name="req">Request message.</param>
            <typeparam name="TRequest">Type of request message.</typeparam>
            <typeparam name="TResponse">The of response message.</typeparam>
        </member>
        <member name="M:Grpc.Core.Calls.AsyncUnaryCall``2(Grpc.Core.CallInvocationDetails{``0,``1},``0)">
            <summary>
            Invokes a simple remote call asynchronously.
            </summary>
            <returns>An awaitable call object providing access to the response.</returns>
            <param name="call">The call defintion.</param>
            <param name="req">Request message.</param>
            <typeparam name="TRequest">Type of request message.</typeparam>
            <typeparam name="TResponse">The of response message.</typeparam>
        </member>
        <member name="M:Grpc.Core.Calls.AsyncServerStreamingCall``2(Grpc.Core.CallInvocationDetails{``0,``1},``0)">
            <summary>
            Invokes a server streaming call asynchronously.
            In server streaming scenario, client sends on request and server responds with a stream of responses.
            </summary>
            <returns>A call object providing access to the asynchronous response stream.</returns>
            <param name="call">The call defintion.</param>
            <param name="req">Request message.</param>
            <typeparam name="TRequest">Type of request message.</typeparam>
            <typeparam name="TResponse">The of response messages.</typeparam>
        </member>
        <member name="M:Grpc.Core.Calls.AsyncClientStreamingCall``2(Grpc.Core.CallInvocationDetails{``0,``1})">
            <summary>
            Invokes a client streaming call asynchronously.
            In client streaming scenario, client sends a stream of requests and server responds with a single response.
            </summary>
            <param name="call">The call defintion.</param>
            <returns>An awaitable call object providing access to the response.</returns>
            <typeparam name="TRequest">Type of request messages.</typeparam>
            <typeparam name="TResponse">The of response message.</typeparam>
        </member>
        <member name="M:Grpc.Core.Calls.AsyncDuplexStreamingCall``2(Grpc.Core.CallInvocationDetails{``0,``1})">
            <summary>
            Invokes a duplex streaming call asynchronously.
            In duplex streaming scenario, client sends a stream of requests and server responds with a stream of responses.
            The response stream is completely independent and both side can be sending messages at the same time.
            </summary>
            <returns>A call object providing access to the asynchronous request and response streams.</returns>
            <param name="call">The call definition.</param>
            <typeparam name="TRequest">Type of request messages.</typeparam>
            <typeparam name="TResponse">Type of reponse messages.</typeparam>
        </member>
        <member name="T:Grpc.Core.AsyncClientStreamingCall`2">
            <summary>
            Return type for client streaming calls.
            </summary>
            <typeparam name="TRequest">Request message type for this call.</typeparam>
            <typeparam name="TResponse">Response message type for this call.</typeparam>
        </member>
        <member name="M:Grpc.Core.AsyncClientStreamingCall`2.GetAwaiter">
            <summary>
            Allows awaiting this object directly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grpc.Core.AsyncClientStreamingCall`2.GetStatus">
            <summary>
            Gets the call status if the call has already finished.
            Throws InvalidOperationException otherwise.
            </summary>
        </member>
        <member name="M:Grpc.Core.AsyncClientStreamingCall`2.GetTrailers">
            <summary>
            Gets the call trailing metadata if the call has already finished.
            Throws InvalidOperationException otherwise.
            </summary>
        </member>
        <member name="M:Grpc.Core.AsyncClientStreamingCall`2.Dispose">
            <summary>
            Provides means to cleanup after the call.
            If the call has already finished normally (request stream has been completed and call result has been received), doesn't do anything.
            Otherwise, requests cancellation of the call which should terminate all pending async operations associated with the call.
            As a result, all resources being used by the call should be released eventually.
            </summary>
        </member>
        <member name="P:Grpc.Core.AsyncClientStreamingCall`2.ResponseAsync">
            <summary>
            Asynchronous call result.
            </summary>
        </member>
        <member name="P:Grpc.Core.AsyncClientStreamingCall`2.ResponseHeadersAsync">
            <summary>
            Asynchronous access to response headers.
            </summary>
        </member>
        <member name="P:Grpc.Core.AsyncClientStreamingCall`2.RequestStream">
            <summary>
            Async stream to send streaming requests.
            </summary>
        </member>
        <member name="T:Grpc.Core.GrpcEnvironment">
            <summary>
            Encapsulates initialization and shutdown of gRPC library.
            </summary>
        </member>
        <member name="M:Grpc.Core.GrpcEnvironment.AddRef">
            <summary>
            Returns a reference-counted instance of initialized gRPC environment.
            Subsequent invocations return the same instance unless reference count has dropped to zero previously.
            </summary>
        </member>
        <member name="M:Grpc.Core.GrpcEnvironment.Release">
            <summary>
            Decrements the reference count for currently active environment and shuts down the gRPC environment if reference count drops to zero.
            (and blocks until the environment has been fully shutdown).
            </summary>
        </member>
        <member name="M:Grpc.Core.GrpcEnvironment.SetLogger(Grpc.Core.Logging.ILogger)">
            <summary>
            Sets the application-wide logger that should be used by gRPC.
            </summary>
        </member>
        <member name="M:Grpc.Core.GrpcEnvironment.#ctor">
            <summary>
            Creates gRPC environment.
            </summary>
        </member>
        <member name="M:Grpc.Core.GrpcEnvironment.GetCoreVersionString">
            <summary>
            Gets version of gRPC C core.
            </summary>
        </member>
        <member name="M:Grpc.Core.GrpcEnvironment.Close">
            <summary>
            Shuts down this environment.
            </summary>
        </member>
        <member name="P:Grpc.Core.GrpcEnvironment.Logger">
            <summary>
            Gets application-wide logger used by gRPC.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="P:Grpc.Core.GrpcEnvironment.CompletionRegistry">
            <summary>
            Gets the completion registry used by this gRPC environment.
            </summary>
        </member>
        <member name="P:Grpc.Core.GrpcEnvironment.CompletionQueue">
            <summary>
            Gets the completion queue used by this gRPC environment.
            </summary>
        </member>
        <member name="P:Grpc.Core.GrpcEnvironment.DebugStats">
            <summary>
            Gets the completion queue used by this gRPC environment.
            </summary>
        </member>
        <member name="T:Grpc.Core.Status">
            <summary>
            Represents RPC result, which consists of <see cref="P:Grpc.Core.Status.StatusCode"/> and an optional detail string. 
            </summary>
        </member>
        <member name="F:Grpc.Core.Status.DefaultSuccess">
            <summary>
            Default result of a successful RPC. StatusCode=OK, empty details message.
            </summary>
        </member>
        <member name="F:Grpc.Core.Status.DefaultCancelled">
            <summary>
            Default result of a cancelled RPC. StatusCode=Cancelled, empty details message.
            </summary>
        </member>
        <member name="M:Grpc.Core.Status.#ctor(Grpc.Core.StatusCode,System.String)">
            <summary>
            Creates a new instance of <c>Status</c>.
            </summary>
            <param name="statusCode">Status code.</param>
            <param name="detail">Detail.</param>
        </member>
        <member name="M:Grpc.Core.Status.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Grpc.Core.Status"/>.
            </summary>
        </member>
        <member name="P:Grpc.Core.Status.StatusCode">
            <summary>
            Gets the gRPC status code. OK indicates success, all other values indicate an error.
            </summary>
        </member>
        <member name="P:Grpc.Core.Status.Detail">
            <summary>
            Gets the detail.
            </summary>
        </member>
        <member name="T:Grpc.Core.StatusCode">
            <summary>
            Result of a remote procedure call.
            Based on grpc_status_code from grpc/status.h
            </summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.OK">
            <summary>Not an error; returned on success.</summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.Cancelled">
            <summary>The operation was cancelled (typically by the caller).</summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.Unknown">
            <summary>
            Unknown error.  An example of where this error may be returned is
            if a Status value received from another address space belongs to
            an error-space that is not known in this address space.  Also
            errors raised by APIs that do not return enough error information
            may be converted to this error.
            </summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.InvalidArgument">
            <summary>
            Client specified an invalid argument.  Note that this differs
            from FAILED_PRECONDITION.  INVALID_ARGUMENT indicates arguments
            that are problematic regardless of the state of the system
            (e.g., a malformed file name).
            </summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.DeadlineExceeded">
            <summary>
            Deadline expired before operation could complete.  For operations
            that change the state of the system, this error may be returned
            even if the operation has completed successfully.  For example, a
            successful response from a server could have been delayed long
            enough for the deadline to expire.
            </summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.NotFound">
            <summary>Some requested entity (e.g., file or directory) was not found.</summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.AlreadyExists">
            <summary>Some entity that we attempted to create (e.g., file or directory) already exists.</summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.PermissionDenied">
            <summary>
            The caller does not have permission to execute the specified
            operation.  PERMISSION_DENIED must not be used for rejections
            caused by exhausting some resource (use RESOURCE_EXHAUSTED
            instead for those errors).  PERMISSION_DENIED must not be
            used if the caller can not be identified (use UNAUTHENTICATED
            instead for those errors).
            </summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.Unauthenticated">
            <summary>The request does not have valid authentication credentials for the operation.</summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.ResourceExhausted">
            <summary>
            Some resource has been exhausted, perhaps a per-user quota, or
            perhaps the entire file system is out of space.
            </summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.FailedPrecondition">
            <summary>
            Operation was rejected because the system is not in a state
            required for the operation's execution.  For example, directory
            to be deleted may be non-empty, an rmdir operation is applied to
            a non-directory, etc.
            </summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.Aborted">
            <summary>
            The operation was aborted, typically due to a concurrency issue
            like sequencer check failures, transaction aborts, etc.
            </summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.OutOfRange">
            <summary>
            Operation was attempted past the valid range.  E.g., seeking or
            reading past end of file.
            </summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.Unimplemented">
            <summary>Operation is not implemented or not supported/enabled in this service.</summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.Internal">
            <summary>
            Internal errors.  Means some invariants expected by underlying
            system has been broken.  If you see one of these errors,
            something is very broken.
            </summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.Unavailable">
            <summary>
            The service is currently unavailable.  This is a most likely a
            transient condition and may be corrected by retrying with
            a backoff.
            </summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.DataLoss">
            <summary>Unrecoverable data loss or corruption.</summary>
        </member>
        <member name="T:Grpc.Core.Server">
            <summary>
            gRPC server. A single server can server arbitrary number of services and can listen on more than one ports.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.#ctor(System.Collections.Generic.IEnumerable{Grpc.Core.ChannelOption})">
            <summary>
            Create a new server.
            </summary>
            <param name="options">Channel options.</param>
        </member>
        <member name="M:Grpc.Core.Server.Start">
            <summary>
            Starts the server.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.ShutdownAsync">
            <summary>
            Requests server shutdown and when there are no more calls being serviced,
            cleans up used resources. The returned task finishes when shutdown procedure
            is complete.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.KillAsync">
            <summary>
            Requests server shutdown while cancelling all the in-progress calls.
            The returned task finishes when shutdown procedure is complete.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.AddServiceDefinitionInternal(Grpc.Core.ServerServiceDefinition)">
            <summary>
            Adds a service definition.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.AddPortInternal(Grpc.Core.ServerPort)">
            <summary>
            Adds a listening port.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.AllowOneRpc">
            <summary>
            Allows one new RPC call to be received by server.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.HandleCallAsync(Grpc.Core.Internal.ServerRpcNew)">
            <summary>
            Selects corresponding handler for given call and handles the call.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.HandleNewServerRpc(System.Boolean,Grpc.Core.Internal.BatchContextSafeHandle)">
            <summary>
            Handles the native callback.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.HandleServerShutdown(System.Boolean,Grpc.Core.Internal.BatchContextSafeHandle)">
            <summary>
            Handles native callback.
            </summary>
        </member>
        <member name="P:Grpc.Core.Server.Services">
            <summary>
            Services that will be exported by the server once started. Register a service with this
            server by adding its definition to this collection.
            </summary>
        </member>
        <member name="P:Grpc.Core.Server.Ports">
            <summary>
            Ports on which the server will listen once started. Register a port with this
            server by adding its definition to this collection.
            </summary>
        </member>
        <member name="P:Grpc.Core.Server.ShutdownTask">
            <summary>
            To allow awaiting termination of the server.
            </summary>
        </member>
        <member name="T:Grpc.Core.Server.ServiceDefinitionCollection">
            <summary>
            Collection of service definitions.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.ServiceDefinitionCollection.Add(Grpc.Core.ServerServiceDefinition)">
            <summary>
            Adds a service definition to the server. This is how you register
            handlers for a service with the server. Only call this before Start().
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.ServiceDefinitionCollection.GetEnumerator">
            <summary>
            Gets enumerator for this collection.
            </summary>
        </member>
        <member name="T:Grpc.Core.Server.ServerPortCollection">
            <summary>
            Collection of server ports.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.ServerPortCollection.Add(Grpc.Core.ServerPort)">
            <summary>
            Adds a new port on which server should listen.
            Only call this before Start().
            <returns>The port on which server will be listening.</returns>
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.ServerPortCollection.Add(System.String,System.Int32,Grpc.Core.ServerCredentials)">
            <summary>
            Adds a new port on which server should listen.
            <returns>The port on which server will be listening.</returns>
            </summary>
            <param name="host">the host</param>
            <param name="port">the port. If zero, an unused port is chosen automatically.</param>
            <param name="credentials">credentials to use to secure this port.</param>
        </member>
        <member name="M:Grpc.Core.Server.ServerPortCollection.GetEnumerator">
            <summary>
            Gets enumerator for this collection.
            </summary>
        </member>
        <member name="T:Grpc.Core.Channel">
            <summary>
            Represents a gRPC channel. Channels are an abstraction of long-lived connections to remote servers.
            More client objects can reuse the same channel. Creating a channel is an expensive operation compared to invoking
            a remote call so in general you should reuse a single channel for as many calls as possible.
            </summary>
        </member>
        <member name="M:Grpc.Core.Channel.#ctor(System.String,Grpc.Core.ChannelCredentials,System.Collections.Generic.IEnumerable{Grpc.Core.ChannelOption})">
            <summary>
            Creates a channel that connects to a specific host.
            Port will default to 80 for an unsecure channel and to 443 for a secure channel.
            </summary>
            <param name="target">Target of the channel.</param>
            <param name="credentials">Credentials to secure the channel.</param>
            <param name="options">Channel options.</param>
        </member>
        <member name="M:Grpc.Core.Channel.#ctor(System.String,System.Int32,Grpc.Core.ChannelCredentials,System.Collections.Generic.IEnumerable{Grpc.Core.ChannelOption})">
            <summary>
            Creates a channel that connects to a specific host and port.
            </summary>
            <param name="host">The name or IP address of the host.</param>
            <param name="port">The port.</param>
            <param name="credentials">Credentials to secure the channel.</param>
            <param name="options">Channel options.</param>
        </member>
        <member name="M:Grpc.Core.Channel.WaitForStateChangedAsync(Grpc.Core.ChannelState,System.Nullable{System.DateTime})">
            <summary>
            Returned tasks completes once channel state has become different from 
            given lastObservedState. 
            If deadline is reached or and error occurs, returned task is cancelled.
            </summary>
        </member>
        <member name="M:Grpc.Core.Channel.ConnectAsync(System.Nullable{System.DateTime})">
            <summary>
            Allows explicitly requesting channel to connect without starting an RPC.
            Returned task completes once state Ready was seen. If the deadline is reached,
            or channel enters the FatalFailure state, the task is cancelled.
            There is no need to call this explicitly unless your use case requires that.
            Starting an RPC on a new channel will request connection implicitly.
            </summary>
            <param name="deadline">The deadline. <c>null</c> indicates no deadline.</param>
        </member>
        <member name="M:Grpc.Core.Channel.ShutdownAsync">
            <summary>
            Waits until there are no more active calls for this channel and then cleans up
            resources used by this channel.
            </summary>
        </member>
        <member name="P:Grpc.Core.Channel.State">
            <summary>
            Gets current connectivity state of this channel.
            </summary>
        </member>
        <member name="P:Grpc.Core.Channel.ResolvedTarget">
            <summary>Resolved address of the remote endpoint in URI format.</summary>
        </member>
        <member name="P:Grpc.Core.Channel.Target">
            <summary>The original target used to create the channel.</summary>
        </member>
        <member name="T:Grpc.Core.Internal.CallSafeHandle">
            <summary>
            grpc_call from <c>grpc/grpc.h</c>
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.SafeHandleZeroIsInvalid">
            <summary>
            Safe handle to wrap native objects.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.ChannelSafeHandle">
            <summary>
            grpc_channel from <c>grpc/grpc.h</c>
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.CompletionQueueSafeHandle">
            <summary>
            grpc_completion_queue from <c>grpc/grpc.h</c>
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.GRPCCallError">
            <summary>
            grpc_call_error from grpc/grpc.h
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.CallErrorExtensions.CheckOk(Grpc.Core.Internal.GRPCCallError)">
            <summary>
            Checks the call API invocation's result is OK.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.GRPCCompletionType">
            <summary>
            grpc_completion_type from grpc/grpc.h
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.GPRClockType">
            <summary>
            gpr_clock_type from grpc/support/time.h
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.Timespec">
            <summary>
            gpr_timespec from grpc/support/time.h
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.Timespec.ToClockType(Grpc.Core.Internal.GPRClockType)">
            <summary>
            Converts the timespec to desired clock type.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.Timespec.ToDateTime">
            <summary>
            Converts Timespec to DateTime.
            Timespec needs to be of type GPRClockType.Realtime and needs to represent a legal value.
            DateTime has lower resolution (100ns), so rounding can occurs.
            Value are always rounded up to the nearest DateTime value in the future.
            
            For Timespec.InfFuture or if timespec is after the largest representable DateTime, DateTime.MaxValue is returned.
            For Timespec.InfPast or if timespec is before the lowest representable DateTime, DateTime.MinValue is returned.
            
            Unless DateTime.MaxValue or DateTime.MinValue is returned, the resulting DateTime is always in UTC
            (DateTimeKind.Utc)
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.Timespec.FromDateTime(System.DateTime)">
            <summary>
            Creates DateTime to Timespec.
            DateTime has to be in UTC (DateTimeKind.Utc) unless it's DateTime.MaxValue or DateTime.MinValue.
            For DateTime.MaxValue of date time after the largest representable Timespec, Timespec.InfFuture is returned.
            For DateTime.MinValue of date time before the lowest representable Timespec, Timespec.InfPast is returned.
            </summary>
            <returns>The date time.</returns>
            <param name="dateTime">Date time.</param>
        </member>
        <member name="P:Grpc.Core.Internal.Timespec.InfFuture">
            <summary>
            Timespec a long time in the future.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.Timespec.InfPast">
            <summary>
            Timespec a long time in the past.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.Timespec.Now">
            <summary>
            Return Timespec representing the current time.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.Timespec.TimevalSeconds">
            <summary>
            Seconds since unix epoch.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.Timespec.TimevalNanos">
            <summary>
            The nanoseconds part of timeval.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.Timespec.PreciseNow">
            <summary>
            Gets current timestamp using <c>GPRClockType.Precise</c>.
            Only available internally because core needs to be compiled with 
            GRPC_TIMERS_RDTSC support for this to use RDTSC.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.GrpcThreadPool">
            <summary>
            Pool of threads polling on the same completion queue.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.GrpcThreadPool.RunHandlerLoop">
            <summary>
            Body of the polling thread.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.ServerSafeHandle">
            <summary>
            grpc_server from grpc/grpc.h
            </summary>
        </member>
        <member name="T:Grpc.Core.MethodType">
            <summary>
            Method types supported by gRPC.
            </summary>
        </member>
        <member name="F:Grpc.Core.MethodType.Unary">
            <summary>Single request sent from client, single response received from server.</summary>
        </member>
        <member name="F:Grpc.Core.MethodType.ClientStreaming">
            <summary>Stream of request sent from client, single response received from server.</summary>
        </member>
        <member name="F:Grpc.Core.MethodType.ServerStreaming">
            <summary>Single request sent from client, stream of responses received from server.</summary>
        </member>
        <member name="F:Grpc.Core.MethodType.DuplexStreaming">
            <summary>Both server and client can stream arbitrary number of requests and responses simultaneously.</summary>
        </member>
        <member name="T:Grpc.Core.IMethod">
            <summary>
            A non-generic representation of a remote method.
            </summary>
        </member>
        <member name="P:Grpc.Core.IMethod.Type">
            <summary>
            Gets the type of the method.
            </summary>
        </member>
        <member name="P:Grpc.Core.IMethod.ServiceName">
            <summary>
            Gets the name of the service to which this method belongs.
            </summary>
        </member>
        <member name="P:Grpc.Core.IMethod.Name">
            <summary>
            Gets the unqualified name of the method.
            </summary>
        </member>
        <member name="P:Grpc.Core.IMethod.FullName">
            <summary>
            Gets the fully qualified name of the method. On the server side, methods are dispatched
            based on this name.
            </summary>
        </member>
        <member name="T:Grpc.Core.Method`2">
            <summary>
            A description of a remote method.
            </summary>
            <typeparam name="TRequest">Request message type for this method.</typeparam>
            <typeparam name="TResponse">Response message type for this method.</typeparam>
        </member>
        <member name="M:Grpc.Core.Method`2.#ctor(Grpc.Core.MethodType,System.String,System.String,Grpc.Core.Marshaller{`0},Grpc.Core.Marshaller{`1})">
            <summary>
            Initializes a new instance of the <c>Method</c> class.
            </summary>
            <param name="type">Type of method.</param>
            <param name="serviceName">Name of service this method belongs to.</param>
            <param name="name">Unqualified name of the method.</param>
            <param name="requestMarshaller">Marshaller used for request messages.</param>
            <param name="responseMarshaller">Marshaller used for response messages.</param>
        </member>
        <member name="M:Grpc.Core.Method`2.GetFullName(System.String,System.String)">
            <summary>
            Gets full name of the method including the service name.
            </summary>
        </member>
        <member name="P:Grpc.Core.Method`2.Type">
            <summary>
            Gets the type of the method.
            </summary>
        </member>
        <member name="P:Grpc.Core.Method`2.ServiceName">
            <summary>
            Gets the name of the service to which this method belongs.
            </summary>
        </member>
        <member name="P:Grpc.Core.Method`2.Name">
            <summary>
            Gets the unqualified name of the method.
            </summary>
        </member>
        <member name="P:Grpc.Core.Method`2.RequestMarshaller">
            <summary>
            Gets the marshaller used for request messages.
            </summary>
        </member>
        <member name="P:Grpc.Core.Method`2.ResponseMarshaller">
            <summary>
            Gets the marshaller used for response messages.
            </summary>
        </member>
        <member name="P:Grpc.Core.Method`2.FullName">
            <summary>
            Gets the fully qualified name of the method. On the server side, methods are dispatched
            based on this name.
            </summary>
        </member>
        <member name="T:Grpc.Core.Marshaller`1">
            <summary>
            Encapsulates the logic for serializing and deserializing messages.
            </summary>
        </member>
        <member name="M:Grpc.Core.Marshaller`1.#ctor(System.Func{`0,System.Byte[]},System.Func{System.Byte[],`0})">
            <summary>
            Initializes a new marshaller.
            </summary>
            <param name="serializer">Function that will be used to serialize messages.</param>
            <param name="deserializer">Function that will be used to deserialize messages.</param>
        </member>
        <member name="P:Grpc.Core.Marshaller`1.Serializer">
            <summary>
            Gets the serializer function.
            </summary>
        </member>
        <member name="P:Grpc.Core.Marshaller`1.Deserializer">
            <summary>
            Gets the deserializer function.
            </summary>
        </member>
        <member name="T:Grpc.Core.Marshallers">
            <summary>
            Utilities for creating marshallers.
            </summary>
        </member>
        <member name="M:Grpc.Core.Marshallers.Create``1(System.Func{``0,System.Byte[]},System.Func{System.Byte[],``0})">
            <summary>
            Creates a marshaller from specified serializer and deserializer.
            </summary>
        </member>
        <member name="P:Grpc.Core.Marshallers.StringMarshaller">
            <summary>
            Returns a marshaller for <c>string</c> type. This is useful for testing.
            </summary>
        </member>
        <member name="T:Grpc.Core.ServerServiceDefinition">
            <summary>
            Mapping of method names to server call handlers.
            Normally, the <c>ServerServiceDefinition</c> objects will be created by the <c>BindService</c> factory method 
            that is part of the autogenerated code for a protocol buffers service definition.
            </summary>
        </member>
        <member name="M:Grpc.Core.ServerServiceDefinition.CreateBuilder(System.String)">
            <summary>
            Creates a new builder object for <c>ServerServiceDefinition</c>.
            </summary>
            <param name="serviceName">The service name.</param>
            <returns>The builder object.</returns>
        </member>
        <member name="T:Grpc.Core.ServerServiceDefinition.Builder">
            <summary>
            Builder class for <see cref="T:Grpc.Core.ServerServiceDefinition"/>.
            </summary>
        </member>
        <member name="M:Grpc.Core.ServerServiceDefinition.Builder.#ctor(System.String)">
            <summary>
            Creates a new instance of builder.
            </summary>
            <param name="serviceName">The service name.</param>
        </member>
        <member name="M:Grpc.Core.ServerServiceDefinition.Builder.AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.UnaryServerMethod{``0,``1})">
            <summary>
            Adds a definitions for a single request - single response method.
            </summary>
            <typeparam name="TRequest">The request message class.</typeparam>
            <typeparam name="TResponse">The response message class.</typeparam>
            <param name="method">The method.</param>
            <param name="handler">The method handler.</param>
            <returns>This builder instance.</returns>
        </member>
        <member name="M:Grpc.Core.ServerServiceDefinition.Builder.AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.ClientStreamingServerMethod{``0,``1})">
            <summary>
            Adds a definitions for a client streaming method.
            </summary>
            <typeparam name="TRequest">The request message class.</typeparam>
            <typeparam name="TResponse">The response message class.</typeparam>
            <param name="method">The method.</param>
            <param name="handler">The method handler.</param>
            <returns>This builder instance.</returns>
        </member>
        <member name="M:Grpc.Core.ServerServiceDefinition.Builder.AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.ServerStreamingServerMethod{``0,``1})">
            <summary>
            Adds a definitions for a server streaming method.
            </summary>
            <typeparam name="TRequest">The request message class.</typeparam>
            <typeparam name="TResponse">The response message class.</typeparam>
            <param name="method">The method.</param>
            <param name="handler">The method handler.</param>
            <returns>This builder instance.</returns>
        </member>
        <member name="M:Grpc.Core.ServerServiceDefinition.Builder.AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.DuplexStreamingServerMethod{``0,``1})">
            <summary>
            Adds a definitions for a bidirectional streaming method.
            </summary>
            <typeparam name="TRequest">The request message class.</typeparam>
            <typeparam name="TResponse">The response message class.</typeparam>
            <param name="method">The method.</param>
            <param name="handler">The method handler.</param>
            <returns>This builder instance.</returns>
        </member>
        <member name="M:Grpc.Core.ServerServiceDefinition.Builder.Build">
            <summary>
            Creates an immutable <c>ServerServiceDefinition</c> from this builder.
            </summary>
            <returns>The <c>ServerServiceDefinition</c> object.</returns>
        </member>
        <member name="T:Grpc.Core.Utils.AsyncStreamExtensions">
            <summary>
            Extension methods that simplify work with gRPC streaming calls.
            </summary>
        </member>
        <member name="M:Grpc.Core.Utils.AsyncStreamExtensions.ForEachAsync``1(Grpc.Core.IAsyncStreamReader{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Reads the entire stream and executes an async action for each element.
            </summary>
        </member>
        <member name="M:Grpc.Core.Utils.AsyncStreamExtensions.ToListAsync``1(Grpc.Core.IAsyncStreamReader{``0})">
            <summary>
            Reads the entire stream and creates a list containing all the elements read.
            </summary>
        </member>
        <member name="M:Grpc.Core.Utils.AsyncStreamExtensions.WriteAllAsync``1(Grpc.Core.IClientStreamWriter{``0},System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Writes all elements from given enumerable to the stream.
            Completes the stream afterwards unless close = false.
            </summary>
        </member>
        <member name="M:Grpc.Core.Utils.AsyncStreamExtensions.WriteAllAsync``1(Grpc.Core.IServerStreamWriter{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes all elements from given enumerable to the stream.
            </summary>
        </member>
        <member name="T:Grpc.Core.Utils.BenchmarkUtil">
            <summary>
            Utility methods to run microbenchmarks.
            </summary>
        </member>
        <member name="M:Grpc.Core.Utils.BenchmarkUtil.RunBenchmark(System.Int32,System.Int32,System.Action)">
            <summary>
            Runs a simple benchmark preceded by warmup phase.
            </summary>
        </member>
        <member name="T:Grpc.Core.ChannelCredentials">
            <summary>
            Client-side channel credentials. Used for creation of a secure channel.
            </summary>
        </member>
        <member name="M:Grpc.Core.ChannelCredentials.Create(Grpc.Core.ChannelCredentials,Grpc.Core.CallCredentials)">
            <summary>
            Creates a new instance of <c>ChannelCredentials</c> class by composing
            given channel credentials with call credentials.
            </summary>
            <param name="channelCredentials">Channel credentials.</param>
            <param name="callCredentials">Call credentials.</param>
            <returns>The new composite <c>ChannelCredentials</c></returns>
        </member>
        <member name="M:Grpc.Core.ChannelCredentials.ToNativeCredentials">
            <summary>
            Creates native object for the credentials. May return null if insecure channel
            should be created.
            </summary>
            <returns>The native credentials.</returns>
        </member>
        <member name="P:Grpc.Core.ChannelCredentials.Insecure">
            <summary>
            Returns instance of credentials that provides no security and 
            will result in creating an unsecure channel with no encryption whatsoever.
            </summary>
        </member>
        <member name="P:Grpc.Core.ChannelCredentials.IsComposable">
            <summary>
            Returns <c>true</c> if this credential type allows being composed by <c>CompositeCredentials</c>.
            </summary>
        </member>
        <member name="T:Grpc.Core.SslCredentials">
            <summary>
            Client-side SSL credentials.
            </summary>
        </member>
        <member name="M:Grpc.Core.SslCredentials.#ctor">
            <summary>
            Creates client-side SSL credentials loaded from
            disk file pointed to by the GRPC_DEFAULT_SSL_ROOTS_FILE_PATH environment variable.
            If that fails, gets the roots certificates from a well known place on disk.
            </summary>
        </member>
        <member name="M:Grpc.Core.SslCredentials.#ctor(System.String)">
            <summary>
            Creates client-side SSL credentials from
            a string containing PEM encoded root certificates.
            </summary>
        </member>
        <member name="M:Grpc.Core.SslCredentials.#ctor(System.String,Grpc.Core.KeyCertificatePair)">
            <summary>
            Creates client-side SSL credentials.
            </summary>
            <param name="rootCertificates">string containing PEM encoded server root certificates.</param>
            <param name="keyCertificatePair">a key certificate pair.</param>
        </member>
        <member name="P:Grpc.Core.SslCredentials.RootCertificates">
            <summary>
            PEM encoding of the server root certificates.
            </summary>
        </member>
        <member name="P:Grpc.Core.SslCredentials.KeyCertificatePair">
            <summary>
            Client side key and certificate pair.
            If null, client will not use key and certificate pair.
            </summary>
        </member>
        <member name="T:Grpc.Core.CompositeChannelCredentials">
            <summary>
            Credentials that allow composing one <see cref="T:Grpc.Core.ChannelCredentials"/> object and 
            one or more <see cref="T:Grpc.Core.CallCredentials"/> objects into a single <see cref="T:Grpc.Core.ChannelCredentials"/>.
            </summary>
        </member>
        <member name="M:Grpc.Core.CompositeChannelCredentials.#ctor(Grpc.Core.ChannelCredentials,Grpc.Core.CallCredentials)">
            <summary>
            Initializes a new instance of <c>CompositeChannelCredentials</c> class.
            The resulting credentials object will be composite of all the credentials specified as parameters.
            </summary>
            <param name="channelCredentials">channelCredentials to compose</param>
            <param name="callCredentials">channelCredentials to compose</param>
        </member>
        <member name="T:Grpc.Core.Internal.ChannelArgsSafeHandle">
            <summary>
            grpc_channel_args from <c>grpc/grpc.h</c>
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.AsyncCompletionDelegate`1">
            <summary>
            If error != null, there's been an error or operation has been cancelled.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.AsyncCompletionTaskSource`1">
            <summary>
            Helper for transforming AsyncCompletionDelegate into full-fledged Task.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.AsyncCallBase`2">
            <summary>
            Base for handling both client side and server side calls.
            Manages native call lifecycle and provides convenience methods.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallBase`2.Cancel">
            <summary>
            Requests cancelling the call.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallBase`2.CancelWithStatus(Grpc.Core.Status)">
            <summary>
            Requests cancelling the call with given status.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallBase`2.StartSendMessageInternal(`0,Grpc.Core.WriteFlags,Grpc.Core.Internal.AsyncCompletionDelegate{System.Object})">
            <summary>
            Initiates sending a message. Only one send operation can be active at a time.
            completionDelegate is invoked upon completion.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallBase`2.StartReadMessageInternal(Grpc.Core.Internal.AsyncCompletionDelegate{`1})">
            <summary>
            Initiates reading a message. Only one read operation can be active at a time.
            completionDelegate is invoked upon completion.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallBase`2.ReleaseResourcesIfPossible">
            <summary>
            If there are no more pending actions and no new actions can be started, releases
            the underlying native resources.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallBase`2.HandleSendFinished(System.Boolean)">
            <summary>
            Handles send completion.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallBase`2.HandleHalfclosed(System.Boolean)">
            <summary>
            Handles halfclose completion.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallBase`2.HandleReadFinished(System.Boolean,System.Byte[])">
            <summary>
            Handles streaming read completion.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.AsyncCallServer`2">
            <summary>
            Manages server side native call lifecycle.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallServer`2.ServerSideCallAsync">
            <summary>
            Starts a server side call.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallServer`2.StartSendMessage(`1,Grpc.Core.WriteFlags,Grpc.Core.Internal.AsyncCompletionDelegate{System.Object})">
            <summary>
            Sends a streaming response. Only one pending send action is allowed at any given time.
            completionDelegate is called when the operation finishes.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallServer`2.StartReadMessage(Grpc.Core.Internal.AsyncCompletionDelegate{`0})">
            <summary>
            Receives a streaming request. Only one pending read action is allowed at any given time.
            completionDelegate is called when the operation finishes.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallServer`2.StartSendInitialMetadata(Grpc.Core.Metadata,Grpc.Core.Internal.AsyncCompletionDelegate{System.Object})">
            <summary>
            Initiates sending a initial metadata. 
            Even though C-core allows sending metadata in parallel to sending messages, we will treat sending metadata as a send message operation
            to make things simpler.
            completionDelegate is invoked upon completion.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallServer`2.StartSendStatusFromServer(Grpc.Core.Status,Grpc.Core.Metadata,Grpc.Core.Internal.AsyncCompletionDelegate{System.Object})">
            <summary>
            Sends call result status, also indicating server is done with streaming responses.
            Only one pending send action is allowed at any given time.
            completionDelegate is called when the operation finishes.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallServer`2.HandleFinishedServerside(System.Boolean,System.Boolean)">
            <summary>
            Handles the server side close completion.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.AsyncCallServer`2.CancellationToken">
            <summary>
            Gets cancellation token that gets cancelled once close completion
            is received and the cancelled flag is set.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.AsyncCall`2">
            <summary>
            Manages client side native call lifecycle.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.#ctor(Grpc.Core.CallInvocationDetails{`0,`1},Grpc.Core.Internal.INativeCall)">
            <summary>
            This constructor should only be used for testing.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.UnaryCall(`0)">
            <summary>
            Blocking unary request - unary response call.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.UnaryCallAsync(`0)">
            <summary>
            Starts a unary request - unary response call.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.ClientStreamingCallAsync">
            <summary>
            Starts a streamed request - unary response call.
            Use StartSendMessage and StartSendCloseFromClient to stream requests.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.StartServerStreamingCall(`0)">
            <summary>
            Starts a unary request - streamed response call.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.StartDuplexStreamingCall">
            <summary>
            Starts a streaming request - streaming response call.
            Use StartSendMessage and StartSendCloseFromClient to stream requests.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.StartSendMessage(`0,Grpc.Core.WriteFlags,Grpc.Core.Internal.AsyncCompletionDelegate{System.Object})">
            <summary>
            Sends a streaming request. Only one pending send action is allowed at any given time.
            completionDelegate is called when the operation finishes.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.StartReadMessage(Grpc.Core.Internal.AsyncCompletionDelegate{`1})">
            <summary>
            Receives a streaming response. Only one pending read action is allowed at any given time.
            completionDelegate is called when the operation finishes.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.StartSendCloseFromClient(Grpc.Core.Internal.AsyncCompletionDelegate{System.Object})">
            <summary>
            Sends halfclose, indicating client is done with streaming requests.
            Only one pending send action is allowed at any given time.
            completionDelegate is called when the operation finishes.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.GetStatus">
            <summary>
            Gets the resulting status if the call has already finished.
            Throws InvalidOperationException otherwise.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.GetTrailers">
            <summary>
            Gets the trailing metadata if the call has already finished.
            Throws InvalidOperationException otherwise.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.GetWriteFlagsForCall">
            <summary>
            Gets WriteFlags set in callDetails.Options.WriteOptions
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.HandleReceivedResponseHeaders(System.Boolean,Grpc.Core.Metadata)">
            <summary>
            Handles receive status completion for calls with streaming response.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.HandleUnaryResponse(System.Boolean,Grpc.Core.Internal.ClientSideStatus,System.Byte[],Grpc.Core.Metadata)">
            <summary>
            Handler for unary response completion.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.HandleFinished(System.Boolean,Grpc.Core.Internal.ClientSideStatus)">
            <summary>
            Handles receive status completion for calls with streaming response.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.AsyncCall`2.StreamingCallFinishedTask">
            <summary>
            Get the task that completes once if streaming call finishes with ok status and throws RpcException with given status otherwise.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.AsyncCall`2.ResponseHeadersAsync">
            <summary>
            Get the task that completes once response headers are received.
            </summary>
        </member>
        <member name="T:Grpc.Core.Utils.Preconditions">
            <summary>
            Utility methods to simplify checking preconditions in the code.
            </summary>
        </member>
        <member name="M:Grpc.Core.Utils.Preconditions.CheckArgument(System.Boolean)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> if condition is false.
            </summary>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:Grpc.Core.Utils.Preconditions.CheckArgument(System.Boolean,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> with given message if condition is false.
            </summary>
            <param name="condition">The condition.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Grpc.Core.Utils.Preconditions.CheckNotNull``1(``0)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if reference is null.
            </summary>
            <param name="reference">The reference.</param>
        </member>
        <member name="M:Grpc.Core.Utils.Preconditions.CheckNotNull``1(``0,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if reference is null.
            </summary>
            <param name="reference">The reference.</param>
            <param name="paramName">The parameter name.</param>
        </member>
        <member name="M:Grpc.Core.Utils.Preconditions.CheckState(System.Boolean)">
            <summary>
            Throws <see cref="T:System.InvalidOperationException"/> if condition is false.
            </summary>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:Grpc.Core.Utils.Preconditions.CheckState(System.Boolean,System.String)">
            <summary>
            Throws <see cref="T:System.InvalidOperationException"/> with given message if condition is false.
            </summary>
            <param name="condition">The condition.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="T:Grpc.Core.Internal.ServerCredentialsSafeHandle">
            <summary>
            grpc_server_credentials from <c>grpc/grpc_security.h</c>
            </summary>
        </member>
        <member name="T:Grpc.Core.ServerCredentials">
            <summary>
            Server side credentials.
            </summary>
        </member>
        <member name="M:Grpc.Core.ServerCredentials.ToNativeCredentials">
            <summary>
            Creates native object for the credentials.
            </summary>
            <returns>The native credentials.</returns>
        </member>
        <member name="P:Grpc.Core.ServerCredentials.Insecure">
            <summary>
            Returns instance of credential that provides no security and 
            will result in creating an unsecure server port with no encryption whatsoever.
            </summary>
        </member>
        <member name="T:Grpc.Core.SslServerCredentials">
            <summary>
            Server-side SSL credentials.
            </summary>
        </member>
        <member name="M:Grpc.Core.SslServerCredentials.#ctor(System.Collections.Generic.IEnumerable{Grpc.Core.KeyCertificatePair},System.String,System.Boolean)">
            <summary>
            Creates server-side SSL credentials.
            </summary>
            <param name="keyCertificatePairs">Key-certificates to use.</param>
            <param name="rootCertificates">PEM encoded client root certificates used to authenticate client.</param>
            <param name="forceClientAuth">If true, client will be rejected unless it proves its unthenticity using against rootCertificates.</param>
        </member>
        <member name="M:Grpc.Core.SslServerCredentials.#ctor(System.Collections.Generic.IEnumerable{Grpc.Core.KeyCertificatePair})">
            <summary>
            Creates server-side SSL credentials.
            This constructor should be use if you do not wish to autheticate client
            using client root certificates.
            </summary>
            <param name="keyCertificatePairs">Key-certificates to use.</param>
        </member>
        <member name="P:Grpc.Core.SslServerCredentials.KeyCertificatePairs">
            <summary>
            Key-certificate pairs.
            </summary>
        </member>
        <member name="P:Grpc.Core.SslServerCredentials.RootCertificates">
            <summary>
            PEM encoded client root certificates.
            </summary>
        </member>
        <member name="P:Grpc.Core.SslServerCredentials.ForceClientAuthentication">
            <summary>
            If true, the authenticity of client check will be enforced.
            </summary>
        </member>
        <member name="T:Grpc.Core.Metadata">
            <summary>
            A collection of metadata entries that can be exchanged during a call.
            gRPC supports these types of metadata:
            <list type="bullet">
            <item><term>Request headers</term><description>are sent by the client at the beginning of a remote call before any request messages are sent.</description></item>
            <item><term>Response headers</term><description>are sent by the server at the beginning of a remote call handler before any response messages are sent.</description></item>
            <item><term>Response trailers</term><description>are sent by the server at the end of a remote call along with resulting call status.</description></item>
            </list>
            </summary>
        </member>
        <member name="F:Grpc.Core.Metadata.BinaryHeaderSuffix">
            <summary>
            All binary headers should have this suffix.
            </summary>
        </member>
        <member name="F:Grpc.Core.Metadata.Empty">
            <summary>
            An read-only instance of metadata containing no entries.
            </summary>
        </member>
        <member name="M:Grpc.Core.Metadata.#ctor">
            <summary>
            Initializes a new instance of <c>Metadata</c>.
            </summary>
        </member>
        <member name="M:Grpc.Core.Metadata.Freeze">
            <summary>
            Makes this object read-only.
            </summary>
            <returns>this object</returns>
        </member>
        <member name="T:Grpc.Core.Metadata.Entry">
            <summary>
            Metadata entry
            </summary>
        </member>
        <member name="M:Grpc.Core.Metadata.Entry.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Grpc.Core.Metadata.Entry"/> struct with a binary value.
            </summary>
            <param name="key">Metadata key, needs to have suffix indicating a binary valued metadata entry.</param>
            <param name="valueBytes">Value bytes.</param>
        </member>
        <member name="M:Grpc.Core.Metadata.Entry.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Grpc.Core.Metadata.Entry"/> struct holding an ASCII value.
            </summary>
            <param name="key">Metadata key, must not use suffix indicating a binary valued metadata entry.</param>
            <param name="value">Value string. Only ASCII characters are allowed.</param>
        </member>
        <member name="M:Grpc.Core.Metadata.Entry.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Grpc.Core.Metadata.Entry"/>.
            </summary>
        </member>
        <member name="M:Grpc.Core.Metadata.Entry.GetSerializedValueUnsafe">
            <summary>
            Gets the serialized value for this entry. For binary metadata entries, this leaks
            the internal <c>valueBytes</c> byte array and caller must not change contents of it.
            </summary>
        </member>
        <member name="M:Grpc.Core.Metadata.Entry.CreateUnsafe(System.String,System.Byte[])">
            <summary>
            Creates a binary value or ascii value metadata entry from data received from the native layer.
            We trust C core to give us well-formed data, so we don't perform any checks or defensive copying.
            </summary>
        </member>
        <member name="P:Grpc.Core.Metadata.Entry.Key">
            <summary>
            Gets the metadata entry key.
            </summary>
        </member>
        <member name="P:Grpc.Core.Metadata.Entry.ValueBytes">
            <summary>
            Gets the binary value of this metadata entry.
            </summary>
        </member>
        <member name="P:Grpc.Core.Metadata.Entry.Value">
            <summary>
            Gets the string value of this metadata entry.
            </summary>
        </member>
        <member name="P:Grpc.Core.Metadata.Entry.IsBinary">
            <summary>
            Returns <c>true</c> if this entry is a binary-value entry.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.MetadataArraySafeHandle">
            <summary>
            grpc_metadata_array from <c>grpc/grpc.h</c>
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.MetadataArraySafeHandle.ReadMetadataFromPtrUnsafe(System.IntPtr)">
            <summary>
            Reads metadata from pointer to grpc_metadata_array
            </summary>
        </member>
        <member name="T:Grpc.Core.HeaderInterceptor">
            <summary>
            Interceptor for call headers.
            </summary>
            <remarks>Header interceptor is no longer to recommented way to perform authentication.
            For header (initial metadata) based auth such as OAuth2 or JWT access token, use <see cref="T:Grpc.Core.MetadataCredentials"/>.
            </remarks>
        </member>
        <member name="T:Grpc.Core.ClientBase">
            <summary>
            Base class for client-side stubs.
            </summary>
        </member>
        <member name="M:Grpc.Core.ClientBase.#ctor(Grpc.Core.Channel)">
            <summary>
            Initializes a new instance of <c>ClientBase</c> class.
            </summary>
            <param name="channel">The channel to use for remote call invocation.</param>
        </member>
        <member name="M:Grpc.Core.ClientBase.CreateCall``2(Grpc.Core.Method{``0,``1},Grpc.Core.CallOptions)">
            <summary>
            Creates a new call to given method.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="options">The call options.</param>
            <typeparam name="TRequest">Request message type.</typeparam>
            <typeparam name="TResponse">Response message type.</typeparam>
            <returns>The call invocation details.</returns>
        </member>
        <member name="P:Grpc.Core.ClientBase.HeaderInterceptor">
            <summary>
            Can be used to register a custom header interceptor.
            The interceptor is invoked each time a new call on this client is started.
            It is not recommented to use header interceptor to add auth headers to RPC calls.
            </summary>
            <seealso cref="P:Grpc.Core.ClientBase.HeaderInterceptor"/>
        </member>
        <member name="P:Grpc.Core.ClientBase.Host">
            <summary>
            gRPC supports multiple "hosts" being served by a single server. 
            This property can be used to set the target host explicitly.
            By default, this will be set to <c>null</c> with the meaning
            "use default host".
            </summary>
        </member>
        <member name="P:Grpc.Core.ClientBase.Channel">
            <summary>
            Channel associated with this client.
            </summary>
        </member>
        <member name="T:Grpc.Core.UnaryServerMethod`2">
            <summary>
            Server-side handler for unary call.
            </summary>
            <typeparam name="TRequest">Request message type for this method.</typeparam>
            <typeparam name="TResponse">Response message type for this method.</typeparam>
        </member>
        <member name="T:Grpc.Core.ClientStreamingServerMethod`2">
            <summary>
            Server-side handler for client streaming call.
            </summary>
            <typeparam name="TRequest">Request message type for this method.</typeparam>
            <typeparam name="TResponse">Response message type for this method.</typeparam>
        </member>
        <member name="T:Grpc.Core.ServerStreamingServerMethod`2">
            <summary>
            Server-side handler for server streaming call.
            </summary>
            <typeparam name="TRequest">Request message type for this method.</typeparam>
            <typeparam name="TResponse">Response message type for this method.</typeparam>
        </member>
        <member name="T:Grpc.Core.DuplexStreamingServerMethod`2">
            <summary>
            Server-side handler for bidi streaming call.
            </summary>
            <typeparam name="TRequest">Request message type for this method.</typeparam>
            <typeparam name="TResponse">Response message type for this method.</typeparam>
        </member>
        <member name="T:Grpc.Core.Internal.ClientRequestStream`2">
            <summary>
            Writes requests asynchronously to an underlying AsyncCall object.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.ServerResponseStream`2">
            <summary>
            Writes responses asynchronously to an underlying AsyncCallServer object.
            </summary>
        </member>
        <member name="T:Grpc.Core.IHasWriteOptions">
            <summary>
            Allows sharing write options between ServerCallContext and other objects.
            </summary>
        </member>
        <member name="P:Grpc.Core.IHasWriteOptions.WriteOptions">
            <summary>
            Gets or sets the write options.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.DebugStats.CheckOK">
            <summary>
            Checks the debug stats and take action for any inconsistency found.
            </summary>
        </member>
        <member name="T:Grpc.Core.ServerCallContext">
            <summary>
            Context for a server-side call.
            </summary>
        </member>
        <member name="M:Grpc.Core.ServerCallContext.WriteResponseHeadersAsync(Grpc.Core.Metadata)">
            <summary>
            Asynchronously sends response headers for the current call to the client. This method may only be invoked once for each call and needs to be invoked
            before any response messages are written. Writing the first response message implicitly sends empty response headers if <c>WriteResponseHeadersAsync</c> haven't
            been called yet.
            </summary>
            <param name="responseHeaders">The response headers to send.</param>
            <returns>The task that finished once response headers have been written.</returns>
        </member>
        <member name="M:Grpc.Core.ServerCallContext.CreatePropagationToken(Grpc.Core.ContextPropagationOptions)">
            <summary>
            Creates a propagation token to be used to propagate call context to a child call.
            </summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.Method">
            <summary>Name of method called in this RPC.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.Host">
            <summary>Name of host called in this RPC.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.Peer">
            <summary>Address of the remote endpoint in URI format.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.Deadline">
            <summary>Deadline for this RPC.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.RequestHeaders">
            <summary>Initial metadata sent by client.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.CancellationToken">
            <summary>Cancellation token signals when call is cancelled.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.ResponseTrailers">
            <summary>Trailers to send back to client after RPC finishes.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.Status">
            <summary> Status to send back to client after RPC finishes.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.WriteOptions">
            <summary>
            Allows setting write options for the following write.
            For streaming response calls, this property is also exposed as on IServerStreamWriter for convenience.
            Both properties are backed by the same underlying value.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.CompletionQueueEvent">
            <summary>
            grpc_event from grpc/grpc.h
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.BatchContextSafeHandle">
            <summary>
            grpcsharp_batch_context
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.ClientSideStatus">
            <summary>
            Status + metadata received on client side when call finishes.
            (when receive_status_on_client operation finishes).
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.ServerRpcNew">
            <summary>
            Details of a newly received RPC.
            </summary>
        </member>
        <member name="T:Grpc.Core.ChannelOption">
            <summary>
            Channel option specified when creating a channel.
            Corresponds to grpc_channel_args from grpc/grpc.h.
            </summary>
        </member>
        <member name="M:Grpc.Core.ChannelOption.#ctor(System.String,System.String)">
            <summary>
            Creates a channel option with a string value.
            </summary>
            <param name="name">Name.</param>
            <param name="stringValue">String value.</param>
        </member>
        <member name="M:Grpc.Core.ChannelOption.#ctor(System.String,System.Int32)">
            <summary>
            Creates a channel option with an integer value.
            </summary>
            <param name="name">Name.</param>
            <param name="intValue">Integer value.</param>
        </member>
        <member name="P:Grpc.Core.ChannelOption.Type">
            <summary>
            Gets the type of the <c>ChannelOption</c>.
            </summary>
        </member>
        <member name="P:Grpc.Core.ChannelOption.Name">
            <summary>
            Gets the name of the <c>ChannelOption</c>.
            </summary>
        </member>
        <member name="P:Grpc.Core.ChannelOption.IntValue">
            <summary>
            Gets the integer value the <c>ChannelOption</c>.
            </summary>
        </member>
        <member name="P:Grpc.Core.ChannelOption.StringValue">
            <summary>
            Gets the string value the <c>ChannelOption</c>.
            </summary>
        </member>
        <member name="T:Grpc.Core.ChannelOption.OptionType">
            <summary>
            Type of <c>ChannelOption</c>.
            </summary>
        </member>
        <member name="F:Grpc.Core.ChannelOption.OptionType.Integer">
            <summary>
            Channel option with integer value.
            </summary>
        </member>
        <member name="F:Grpc.Core.ChannelOption.OptionType.String">
            <summary>
            Channel option with string value.
            </summary>
        </member>
        <member name="T:Grpc.Core.ChannelOptions">
            <summary>
            Defines names of supported channel options.
            </summary>
        </member>
        <member name="F:Grpc.Core.ChannelOptions.SslTargetNameOverride">
            <summary>Override SSL target check. Only to be used for testing.</summary>
        </member>
        <member name="F:Grpc.Core.ChannelOptions.Census">
            <summary>Enable census for tracing and stats collection</summary>
        </member>
        <member name="F:Grpc.Core.ChannelOptions.MaxConcurrentStreams">
            <summary>Maximum number of concurrent incoming streams to allow on a http2 connection</summary>
        </member>
        <member name="F:Grpc.Core.ChannelOptions.MaxMessageLength">
            <summary>Maximum message length that the channel can receive</summary>
        </member>
        <member name="F:Grpc.Core.ChannelOptions.Http2InitialSequenceNumber">
            <summary>Initial sequence number for http2 transports</summary>
        </member>
        <member name="F:Grpc.Core.ChannelOptions.DefaultAuthority">
            <summary>Default authority for calls.</summary>
        </member>
        <member name="F:Grpc.Core.ChannelOptions.PrimaryUserAgentString">
            <summary>Primary user agent: goes at the start of the user-agent metadata</summary>
        </member>
        <member name="F:Grpc.Core.ChannelOptions.SecondaryUserAgentString">
            <summary>Secondary user agent: goes at the end of the user-agent metadata</summary>
        </member>
        <member name="M:Grpc.Core.ChannelOptions.CreateChannelArgs(System.Collections.Generic.ICollection{Grpc.Core.ChannelOption})">
            <summary>
            Creates native object for a collection of channel options.
            </summary>
            <returns>The native channel arguments.</returns>
        </member>
        <member name="T:Grpc.Core.AsyncUnaryCall`1">
            <summary>
            Return type for single request - single response call.
            </summary>
            <typeparam name="TResponse">Response message type for this call.</typeparam>
        </member>
        <member name="M:Grpc.Core.AsyncUnaryCall`1.GetAwaiter">
            <summary>
            Allows awaiting this object directly.
            </summary>
        </member>
        <member name="M:Grpc.Core.AsyncUnaryCall`1.GetStatus">
            <summary>
            Gets the call status if the call has already finished.
            Throws InvalidOperationException otherwise.
            </summary>
        </member>
        <member name="M:Grpc.Core.AsyncUnaryCall`1.GetTrailers">
            <summary>
            Gets the call trailing metadata if the call has already finished.
            Throws InvalidOperationException otherwise.
            </summary>
        </member>
        <member name="M:Grpc.Core.AsyncUnaryCall`1.Dispose">
            <summary>
            Provides means to cleanup after the call.
            If the call has already finished normally (request stream has been completed and call result has been received), doesn't do anything.
            Otherwise, requests cancellation of the call which should terminate all pending async operations associated with the call.
            As a result, all resources being used by the call should be released eventually.
            </summary>
        </member>
        <member name="P:Grpc.Core.AsyncUnaryCall`1.ResponseAsync">
            <summary>
            Asynchronous call result.
            </summary>
        </member>
        <member name="P:Grpc.Core.AsyncUnaryCall`1.ResponseHeadersAsync">
            <summary>
            Asynchronous access to response headers.
            </summary>
        </member>
        <member name="T:Grpc.Core.VersionInfo">
            <summary>
            Provides info about current version of gRPC.
            </summary>
        </member>
        <member name="F:Grpc.Core.VersionInfo.CurrentVersion">
            <summary>
            Current version of gRPC C#
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.CStringSafeHandle">
            <summary>
            Owned char* object.
            </summary>
        </member>
        <member name="T:Grpc.Core.KeyCertificatePair">
            <summary>
            Key certificate pair (in PEM encoding).
            </summary>
        </member>
        <member name="M:Grpc.Core.KeyCertificatePair.#ctor(System.String,System.String)">
            <summary>
            Creates a new certificate chain - private key pair.
            </summary>
            <param name="certificateChain">PEM encoded certificate chain.</param>
            <param name="privateKey">PEM encoded private key.</param>
        </member>
        <member name="P:Grpc.Core.KeyCertificatePair.CertificateChain">
            <summary>
            PEM encoded certificate chain.
            </summary>
        </member>
        <member name="P:Grpc.Core.KeyCertificatePair.PrivateKey">
            <summary>
            PEM encoded private key.
            </summary>
        </member>
        <member name="T:Grpc.Core.Logging.ILogger">
            <summary>For logging messages.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ILogger.ForType``1">
            <summary>Returns a logger associated with the specified type.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ILogger.Debug(System.String)">
            <summary>Logs a message with severity Debug.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ILogger.Debug(System.String,System.Object[])">
            <summary>Logs a formatted message with severity Debug.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ILogger.Info(System.String)">
            <summary>Logs a message with severity Info.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ILogger.Info(System.String,System.Object[])">
            <summary>Logs a formatted message with severity Info.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ILogger.Warning(System.String)">
            <summary>Logs a message with severity Warning.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ILogger.Warning(System.String,System.Object[])">
            <summary>Logs a formatted message with severity Warning.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ILogger.Warning(System.Exception,System.String)">
            <summary>Logs a message and an associated exception with severity Warning.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ILogger.Error(System.String)">
            <summary>Logs a message with severity Error.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ILogger.Error(System.String,System.Object[])">
            <summary>Logs a formatted message with severity Error.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ILogger.Error(System.Exception,System.String)">
            <summary>Logs a message and an associated exception with severity Error.</summary>
        </member>
        <member name="T:Grpc.Core.Logging.ConsoleLogger">
            <summary>Logger that logs to System.Console.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ConsoleLogger.#ctor">
            <summary>Creates a console logger not associated to any specific type.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ConsoleLogger.#ctor(System.Type)">
            <summary>Creates a console logger that logs messsage specific for given type.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ConsoleLogger.ForType``1">
            <summary>
            Returns a logger associated with the specified type.
            </summary>
        </member>
        <member name="M:Grpc.Core.Logging.ConsoleLogger.Debug(System.String)">
            <summary>Logs a message with severity Debug.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ConsoleLogger.Debug(System.String,System.Object[])">
            <summary>Logs a formatted message with severity Debug.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ConsoleLogger.Info(System.String)">
            <summary>Logs a message with severity Info.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ConsoleLogger.Info(System.String,System.Object[])">
            <summary>Logs a formatted message with severity Info.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ConsoleLogger.Warning(System.String)">
            <summary>Logs a message with severity Warning.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ConsoleLogger.Warning(System.String,System.Object[])">
            <summary>Logs a formatted message with severity Warning.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ConsoleLogger.Warning(System.Exception,System.String)">
            <summary>Logs a message and an associated exception with severity Warning.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ConsoleLogger.Error(System.String)">
            <summary>Logs a message with severity Error.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ConsoleLogger.Error(System.String,System.Object[])">
            <summary>Logs a formatted message with severity Error.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ConsoleLogger.Error(System.Exception,System.String)">
            <summary>Logs a message and an associated exception with severity Error.</summary>
        </member>
        <member name="T:Grpc.Core.Internal.NativeLogRedirector">
            <summary>
            Logs from gRPC C core library can get lost if your application is not a console app.
            This class allows redirection of logs to gRPC logger.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.NativeLogRedirector.Redirect">
            <summary>
            Redirects logs from native gRPC C core library to a general logger.
            </summary>
        </member>
        <member name="T:Grpc.Core.ChannelState">
            <summary>
            Connectivity state of a channel.
            Based on grpc_connectivity_state from grpc/grpc.h
            </summary>
        </member>
        <member name="F:Grpc.Core.ChannelState.Idle">
            <summary>
            Channel is idle
            </summary>
        </member>
        <member name="F:Grpc.Core.ChannelState.Connecting">
            <summary>
            Channel is connecting
            </summary>
        </member>
        <member name="F:Grpc.Core.ChannelState.Ready">
            <summary>
            Channel is ready for work
            </summary>
        </member>
        <member name="F:Grpc.Core.ChannelState.TransientFailure">
            <summary>
            Channel has seen a failure but expects to recover
            </summary>
        </member>
        <member name="F:Grpc.Core.ChannelState.FatalFailure">
            <summary>
            Channel has seen a failure that it cannot recover from
            </summary>
        </member>
        <member name="T:Grpc.Core.CallInvocationDetails`2">
            <summary>
            Details about a client-side call to be invoked.
            </summary>
            <typeparam name="TRequest">Request message type for the call.</typeparam>
            <typeparam name="TResponse">Response message type for the call.</typeparam>
        </member>
        <member name="M:Grpc.Core.CallInvocationDetails`2.#ctor(Grpc.Core.Channel,Grpc.Core.Method{`0,`1},Grpc.Core.CallOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Grpc.Core.CallInvocationDetails`2"/> struct.
            </summary>
            <param name="channel">Channel to use for this call.</param>
            <param name="method">Method to call.</param>
            <param name="options">Call options.</param>
        </member>
        <member name="M:Grpc.Core.CallInvocationDetails`2.#ctor(Grpc.Core.Channel,Grpc.Core.Method{`0,`1},System.String,Grpc.Core.CallOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Grpc.Core.CallInvocationDetails`2"/> struct.
            </summary>
            <param name="channel">Channel to use for this call.</param>
            <param name="method">Method to call.</param>
            <param name="host">Host that contains the method. if <c>null</c>, default host will be used.</param>
            <param name="options">Call options.</param>
        </member>
        <member name="M:Grpc.Core.CallInvocationDetails`2.#ctor(Grpc.Core.Channel,System.String,System.String,Grpc.Core.Marshaller{`0},Grpc.Core.Marshaller{`1},Grpc.Core.CallOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Grpc.Core.CallInvocationDetails`2"/> struct.
            </summary>
            <param name="channel">Channel to use for this call.</param>
            <param name="method">Qualified method name.</param>
            <param name="host">Host that contains the method.</param>
            <param name="requestMarshaller">Request marshaller.</param>
            <param name="responseMarshaller">Response marshaller.</param>
            <param name="options">Call options.</param>
        </member>
        <member name="M:Grpc.Core.CallInvocationDetails`2.WithOptions(Grpc.Core.CallOptions)">
            <summary>
            Returns new instance of <see cref="T:Grpc.Core.CallInvocationDetails`2"/> with
            <c>Options</c> set to the value provided. Values of all other fields are preserved.
            </summary>
        </member>
        <member name="P:Grpc.Core.CallInvocationDetails`2.Channel">
            <summary>
            Get channel associated with this call.
            </summary>
        </member>
        <member name="P:Grpc.Core.CallInvocationDetails`2.Method">
            <summary>
            Gets name of method to be called.
            </summary>
        </member>
        <member name="P:Grpc.Core.CallInvocationDetails`2.Host">
            <summary>
            Get name of host.
            </summary>
        </member>
        <member name="P:Grpc.Core.CallInvocationDetails`2.RequestMarshaller">
            <summary>
            Gets marshaller used to serialize requests.
            </summary>
        </member>
        <member name="P:Grpc.Core.CallInvocationDetails`2.ResponseMarshaller">
            <summary>
            Gets marshaller used to deserialized responses.
            </summary>
        </member>
        <member name="P:Grpc.Core.CallInvocationDetails`2.Options">
            <summary>
            Gets the call options.
            </summary>
        </member>
        <member name="T:Grpc.Core.CallOptions">
            <summary>
            Options for calls made by client.
            </summary>
        </member>
        <member name="M:Grpc.Core.CallOptions.#ctor(Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken,Grpc.Core.WriteOptions,Grpc.Core.ContextPropagationToken,Grpc.Core.CallCredentials)">
            <summary>
            Creates a new instance of <c>CallOptions</c> struct.
            </summary>
            <param name="headers">Headers to be sent with the call.</param>
            <param name="deadline">Deadline for the call to finish. null means no deadline.</param>
            <param name="cancellationToken">Can be used to request cancellation of the call.</param>
            <param name="writeOptions">Write options that will be used for this call.</param>
            <param name="propagationToken">Context propagation token obtained from <see cref="T:Grpc.Core.ServerCallContext"/>.</param>
            <param name="credentials">Credentials to use for this call.</param>
        </member>
        <member name="M:Grpc.Core.CallOptions.WithHeaders(Grpc.Core.Metadata)">
            <summary>
            Returns new instance of <see cref="T:Grpc.Core.CallOptions"/> with
            <c>Headers</c> set to the value provided. Values of all other fields are preserved.
            </summary>
            <param name="headers">The headers.</param>
        </member>
        <member name="M:Grpc.Core.CallOptions.WithDeadline(System.DateTime)">
            <summary>
            Returns new instance of <see cref="T:Grpc.Core.CallOptions"/> with
            <c>Deadline</c> set to the value provided. Values of all other fields are preserved.
            </summary>
            <param name="deadline">The deadline.</param>
        </member>
        <member name="M:Grpc.Core.CallOptions.WithCancellationToken(System.Threading.CancellationToken)">
            <summary>
            Returns new instance of <see cref="T:Grpc.Core.CallOptions"/> with
            <c>CancellationToken</c> set to the value provided. Values of all other fields are preserved.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Grpc.Core.CallOptions.Normalize">
            <summary>
            Returns a new instance of <see cref="T:Grpc.Core.CallOptions"/> with 
            all previously unset values set to their defaults and deadline and cancellation
            token propagated when appropriate.
            </summary>
        </member>
        <member name="P:Grpc.Core.CallOptions.Headers">
            <summary>
            Headers to send at the beginning of the call.
            </summary>
        </member>
        <member name="P:Grpc.Core.CallOptions.Deadline">
            <summary>
            Call deadline.
            </summary>
        </member>
        <member name="P:Grpc.Core.CallOptions.CancellationToken">
            <summary>
            Token that can be used for cancelling the call.
            </summary>
        </member>
        <member name="P:Grpc.Core.CallOptions.WriteOptions">
            <summary>
            Write options that will be used for this call.
            </summary>
        </member>
        <member name="P:Grpc.Core.CallOptions.PropagationToken">
            <summary>
            Token for propagating parent call context.
            </summary>
        </member>
        <member name="P:Grpc.Core.CallOptions.Credentials">
            <summary>
            Credentials to use for this call.
            </summary>
        </member>
        <member name="T:Grpc.Core.CompressionLevel">
            <summary>
            Compression level based on grpc_compression_level from grpc/compression.h
            </summary>
        </member>
        <member name="F:Grpc.Core.CompressionLevel.None">
            <summary>
            No compression.
            </summary>
        </member>
        <member name="F:Grpc.Core.CompressionLevel.Low">
            <summary>
            Low compression.
            </summary>
        </member>
        <member name="F:Grpc.Core.CompressionLevel.Medium">
            <summary>
            Medium compression.
            </summary>
        </member>
        <member name="F:Grpc.Core.CompressionLevel.High">
            <summary>
            High compression.
            </summary>
        </member>
        <member name="T:Grpc.Core.WriteFlags">
            <summary>
            Flags for write operations.
            </summary>
        </member>
        <member name="F:Grpc.Core.WriteFlags.BufferHint">
            <summary>
            Hint that the write may be buffered and need not go out on the wire immediately.
            gRPC is free to buffer the message until the next non-buffered
            write, or until write stream completion, but it need not buffer completely or at all.
            </summary>
        </member>
        <member name="F:Grpc.Core.WriteFlags.NoCompress">
            <summary>
            Force compression to be disabled for a particular write.
            </summary>
        </member>
        <member name="T:Grpc.Core.WriteOptions">
            <summary>
            Options for write operations.
            </summary>
        </member>
        <member name="F:Grpc.Core.WriteOptions.Default">
            <summary>
            Default write options.
            </summary>
        </member>
        <member name="M:Grpc.Core.WriteOptions.#ctor(Grpc.Core.WriteFlags)">
            <summary>
            Initializes a new instance of <c>WriteOptions</c> class.
            </summary>
            <param name="flags">The write flags.</param>
        </member>
        <member name="P:Grpc.Core.WriteOptions.Flags">
            <summary>
            Gets the write flags.
            </summary>
        </member>
        <member name="T:Grpc.Core.ContextPropagationToken">
            <summary>
            Token for propagating context of server side handlers to child calls.
            In situations when a backend is making calls to another backend,
            it makes sense to propagate properties like deadline and cancellation 
            token of the server call to the child call.
            The gRPC native layer provides some other contexts (like tracing context) that
            are not accessible to explicitly C# layer, but this token still allows propagating them.
            </summary>
        </member>
        <member name="F:Grpc.Core.ContextPropagationToken.DefaultCoreMask">
            <summary>
            Default propagation mask used by C core.
            </summary>
        </member>
        <member name="F:Grpc.Core.ContextPropagationToken.DefaultMask">
            <summary>
            Default propagation mask used by C# - we want to propagate deadline 
            and cancellation token by our own means.
            </summary>
        </member>
        <member name="P:Grpc.Core.ContextPropagationToken.ParentCall">
            <summary>
            Gets the native handle of the parent call.
            </summary>
        </member>
        <member name="P:Grpc.Core.ContextPropagationToken.ParentDeadline">
            <summary>
            Gets the parent call's deadline.
            </summary>
        </member>
        <member name="P:Grpc.Core.ContextPropagationToken.ParentCancellationToken">
            <summary>
            Gets the parent call's cancellation token.
            </summary>
        </member>
        <member name="P:Grpc.Core.ContextPropagationToken.Options">
            <summary>
            Get the context propagation options.
            </summary>
        </member>
        <member name="T:Grpc.Core.ContextPropagationOptions">
            <summary>
            Options for <see cref="T:Grpc.Core.ContextPropagationToken"/>.
            </summary>
        </member>
        <member name="F:Grpc.Core.ContextPropagationOptions.Default">
            <summary>
            The context propagation options that will be used by default.
            </summary>
        </member>
        <member name="M:Grpc.Core.ContextPropagationOptions.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates new context propagation options.
            </summary>
            <param name="propagateDeadline">If set to <c>true</c> parent call's deadline will be propagated to the child call.</param>
            <param name="propagateCancellation">If set to <c>true</c> parent call's cancellation token will be propagated to the child call.</param>
        </member>
        <member name="P:Grpc.Core.ContextPropagationOptions.IsPropagateDeadline">
            <summary><c>true</c> if parent call's deadline should be propagated to the child call.</summary>
        </member>
        <member name="P:Grpc.Core.ContextPropagationOptions.IsPropagateCancellation">
            <summary><c>true</c> if parent call's cancellation token should be propagated to the child call.</summary>
        </member>
        <member name="T:Grpc.Core.ContextPropagationFlags">
            <summary>
            Context propagation flags from grpc/grpc.h.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.CallCredentialsSafeHandle">
            <summary>
            grpc_call_credentials from <c>grpc/grpc_security.h</c>
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.ChannelCredentialsSafeHandle">
            <summary>
            grpc_channel_credentials from <c>grpc/grpc_security.h</c>
            </summary>
        </member>
    </members>
</doc>
